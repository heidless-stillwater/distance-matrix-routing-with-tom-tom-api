{"version":3,"sources":["App.js","index.js"],"names":["App","mapElement","useRef","useState","map","setMap","longitude","setLongitude","latitude","setLatitude","convertToPoints","lngLat","point","lat","lng","useEffect","origin","destinations","tt","key","process","container","current","stylesVisibility","trafficIncidents","trafficFlow","center","zoom","popup","offset","bottom","setHTML","element","document","createElement","className","marker","draggable","setLngLat","addTo","on","getLngLat","setPopup","togglePopup","addMarker","recalculateRoutes","locations","callParameters","destination","origins","Promise","resolve","reject","ttapi","matrixRouting","then","matrixAPIResults","resultsArray","matrix","result","index","location","drivingtime","response","routeSummary","travelTimeInSeconds","sort","a","b","sortedLocations","sortDestinations","sorted","unshift","calculateRoute","routeData","geoJson","getLayer","removeLayer","removeSource","addLayer","id","type","source","data","paint","drawRoute","toGeoJson","e","push","addDeliveryMarker","remove","ref","placeholder","onChange","target","value","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4e0cac54.chunk.js","sourcesContent":["import { useRef, useEffect, useState } from 'react'\nimport * as tt from '@tomtom-international/web-sdk-maps'\nimport * as ttapi from '@tomtom-international/web-sdk-services'\nimport './App.css'\nimport '@tomtom-international/web-sdk-maps/dist/maps.css'\n\nconst App = () => {\n  const mapElement = useRef()\n  const [map, setMap] = useState({})\n  const [longitude, setLongitude] = useState(-0.112869)\n  const [latitude, setLatitude] = useState(51.504)\n\n  const convertToPoints = (lngLat) => {\n    return {\n      point: {\n        latitude: lngLat.lat,\n        longitude: lngLat.lng\n      }\n    }\n  }\n\n  const drawRoute = (geoJson, map) => {\n    if (map.getLayer('route')) {\n      map.removeLayer('route')\n      map.removeSource('route')\n    }\n    map.addLayer({\n      id: 'route',\n      type: 'line',\n      source: {\n        type: 'geojson',\n        data: geoJson\n      },\n      paint: {\n        'line-color': '#4a90e2',\n        'line-width': 6\n  \n      }\n    })\n  }\n\n  const addDeliveryMarker = (lngLat, map) => {\n    const element = document.createElement('div')\n    element.className = 'marker-delivery'\n    new tt.Marker({\n      element: element\n    })\n    .setLngLat(lngLat)\n    .addTo(map)\n  }\n\n  useEffect(() => {\n    const origin = {\n      lng: longitude,\n      lat: latitude,\n    }\n    const destinations = []\n\n    let map = tt.map({\n      key: process.env.REACT_APP_TOM_TOM_API_KEY,\n      container: mapElement.current,\n      stylesVisibility: {\n        trafficIncidents: true,\n        trafficFlow: true,\n      },\n      center: [longitude, latitude],\n      zoom: 14,\n    })\n    setMap(map)\n\n    const addMarker = () => {\n      const popupOffset = {\n        bottom: [0, -25]\n      }\n      const popup = new tt.Popup({ offset: popupOffset }).setHTML('This is you!')\n      const element = document.createElement('div')\n      element.className = 'marker'\n\n      const marker = new tt.Marker({\n        draggable: true,\n        element: element,\n      })\n        .setLngLat([longitude, latitude])\n        .addTo(map)\n      \n      marker.on('dragend', () => {\n        const lngLat = marker.getLngLat()\n        setLongitude(lngLat.lng)\n        setLatitude(lngLat.lat)\n      })\n\n      marker.setPopup(popup).togglePopup()\n      \n    }\n    addMarker()\n\n    const sortDestinations = (locations) => {\n      const pointsForDestinations = locations.map((destination) => {\n        return convertToPoints(destination)\n      })\n      const callParameters = {\n        key: process.env.REACT_APP_TOM_TOM_API_KEY,\n        destinations: pointsForDestinations,\n        origins: [convertToPoints(origin)],\n      }\n\n    return new Promise((resolve, reject) => {\n      ttapi.services\n        .matrixRouting(callParameters)\n        .then((matrixAPIResults) => {\n          const results = matrixAPIResults.matrix[0]\n          const resultsArray = results.map((result, index) => {\n            return {\n              location: locations[index],\n              drivingtime: result.response.routeSummary.travelTimeInSeconds,\n            }\n          })\n          resultsArray.sort((a, b) => {\n            return a.drivingtime - b.drivingtime\n          })\n          const sortedLocations = resultsArray.map((result) => {\n            return result.location\n          })\n          resolve(sortedLocations)\n        })\n      })\n    }\n\n    const recalculateRoutes = () => {\n      sortDestinations(destinations).then((sorted) => {\n        sorted.unshift(origin)\n\n        ttapi.services\n          .calculateRoute({\n            key: process.env.REACT_APP_TOM_TOM_API_KEY,\n            locations: sorted,\n          })\n          .then((routeData) => {\n            const geoJson = routeData.toGeoJson()\n            drawRoute(geoJson, map)\n        })\n      })\n    }\n\n\n    map.on('click', (e) => {\n      destinations.push(e.lngLat)\n      addDeliveryMarker(e.lngLat, map)\n      recalculateRoutes()\n    })\n\n    return () => map.remove()\n  }, [longitude, latitude])\n\n  return (\n    <>\n      {map && (\n        <div className=\"app\">\n          <div ref={mapElement} className=\"map\" />\n          <div className=\"search-bar\">\n            <h1>Where to?</h1>\n            <input\n              type=\"text\"\n              id=\"longitude\"\n              className=\"longitude\"\n              placeholder=\"Put in Longitude\"\n              onChange={(e) => {\n                setLongitude(e.target.value)\n              }}\n            />\n            <input\n              type=\"text\"\n              id=\"latitude\"\n              className=\"latitude\"\n              placeholder=\"Put in latitude\"\n              onChange={(e) => {\n                setLatitude(e.target.value)\n              }}\n            />\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}